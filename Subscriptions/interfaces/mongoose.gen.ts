/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of membersDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `membersDocument.toObject()`. To avoid conflicts with model names, use the type alias `membersObject`.
 * ```
 * const membersObject = members.toObject();
 * ```
 */
export type members = {
  _id: mongoose.Types.ObjectId;
  externalId?: number;
  name?: string;
  email?: string;
  city?: string;
};

/**
 * Lean version of membersDocument (type alias of `members`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { members } from "../models"
 * import { membersObject } from "../interfaces/mongoose.gen.ts"
 *
 * const membersObject: membersObject = members.toObject();
 * ```
 */
export type membersObject = members;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type membersQuery = mongoose.Query<
  any,
  membersDocument,
  membersQueries
> &
  membersQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `membersSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type membersQueries = {};

export type membersMethods = {};

export type membersStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const members = mongoose.model<membersDocument, membersModel>("members", membersSchema);
 * ```
 */
export type membersModel = mongoose.Model<membersDocument, membersQueries> &
  membersStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new members schema instances:
 * ```
 * const membersSchema: membersSchema = new mongoose.Schema({ ... })
 * ```
 */
export type membersSchema = mongoose.Schema<
  membersDocument,
  membersModel,
  membersMethods,
  membersQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const members = mongoose.model<membersDocument, membersModel>("members", membersSchema);
 * ```
 */
export type membersDocument = mongoose.Document<{}, membersQueries> &
  membersMethods & {
    _id: mongoose.Types.ObjectId;
    externalId?: number;
    name?: string;
    email?: string;
    city?: string;
  };

/**
 * Lean version of moviesDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `moviesDocument.toObject()`. To avoid conflicts with model names, use the type alias `moviesObject`.
 * ```
 * const moviesObject = movies.toObject();
 * ```
 */
export type movies = {
  _id: mongoose.Types.ObjectId;
  externalId?: number;
  name?: string;
  genres: string[];
  image?: string;
  premiered?: Date;
};

/**
 * Lean version of moviesDocument (type alias of `movies`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { movies } from "../models"
 * import { moviesObject } from "../interfaces/mongoose.gen.ts"
 *
 * const moviesObject: moviesObject = movies.toObject();
 * ```
 */
export type moviesObject = movies;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type moviesQuery = mongoose.Query<any, moviesDocument, moviesQueries> &
  moviesQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `moviesSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type moviesQueries = {};

export type moviesMethods = {};

export type moviesStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const movies = mongoose.model<moviesDocument, moviesModel>("movies", moviesSchema);
 * ```
 */
export type moviesModel = mongoose.Model<moviesDocument, moviesQueries> &
  moviesStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new movies schema instances:
 * ```
 * const moviesSchema: moviesSchema = new mongoose.Schema({ ... })
 * ```
 */
export type moviesSchema = mongoose.Schema<
  moviesDocument,
  moviesModel,
  moviesMethods,
  moviesQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const movies = mongoose.model<moviesDocument, moviesModel>("movies", moviesSchema);
 * ```
 */
export type moviesDocument = mongoose.Document<{}, moviesQueries> &
  moviesMethods & {
    _id: mongoose.Types.ObjectId;
    externalId?: number;
    name?: string;
    genres: mongoose.Types.Array<string>;
    image?: string;
    premiered?: Date;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
